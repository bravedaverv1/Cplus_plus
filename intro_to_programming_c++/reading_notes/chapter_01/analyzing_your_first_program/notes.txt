1.7 Analyzing Your First Program

here it is again

#include <iostream>

using namespace std;

int main()
{
   cout << "Hello, World!" << endl;
   return 0;
}

The first line,

#include <iostream>
tells the compiler to include a service for “stream input/output”. 
you should simply remember to add this line into all programs that perform input or output.

The next line,

using namespace std;
tells the compiler to use the “standard namespace”.
Namespaces are a mechanism for avoiding naming conflicts in large programs.
You need not be concerned about namespaces. For the programs that you will 
be writing in this book, you will always use the standard namespace. 
Simply add using namespace std; at the top of every program that you write, 
just below the #include directives.

The construction

int main()
{
   . . .
   return 0;
}
defines a function called main that “returns” an “integer”  with value 0.
(that is, a whole number without a fractional part, called int in C++)
This value indicates that the program finished successfully.
A function is a collection of programming instructions that carry out a 
particular task. Every C++ program must have a main function. 
Most C++ programs contain other functions besides main, but it will take us 
until Chapter 5 to discuss functions and return values.

(Definition of function: A sequence of statements that can be invoked
 multiple times, with different values for its parameter variables.)

cout
To display values on the screen, you use an entity called cout and the << 
operator (sometimes called the insertion operator). For example, the statement

cout << 39 + 3;

displays the number 42.

The statement

cout << "Hello";

displays the string Hello. 

string
A string is a sequence of characters. You must enclose the 
contents of a string inside quotation marks so that the compiler 
knows you literally mean the text "Hello" and not a function with 
the same name. 

(Definition of string: A sequence of characters.)

You can send more than one item to cout. Use a << before each one of them. 
For example,

cout << "The answer is " << 6 * 7;

endl 
The endl symbol denotes an end of line marker.
When this marker is sent to cout, the cursor is moved to the first column in the next screen row.
If you don’t use an end of line marker, then the next displayed item will 
simply follow the current string on the same line.

Finally, note that the output and return statements end in a semicolon, just as every English sentence ends in a period.

Questions

1.7.1: Determine what output is generated by these statements.
1. What output is generated by the statements below?

cout << "C++";
cout << " is " << endl;
cout << "fun";

A. C++ is 
   Fun

1.7.2: Determine what the following program instructions do.
Answer the following questions. If the program instructions are not correct, 
enter "error".

1. What does the following program instruction print? 
cout << "Hello";
cout << "World";
A. HelloWorld

2. What does the following program instruction print?
    cout << 2 * 2 << 2;

    A. 42

What does the following program instruction print? 
cout << Goodbye, World! << endl;
A. error
You need to enclose the string in quotation marks:
cout << "Goodbye, World!" << endl;


How many lines of output does this code produce? 
cout << "Hello"
   << endl << endl << "World";
A. 3
The output is
Hello

World

1.7.3: Determine the output from this sequence of assignment statements.
Observe this sequence of assignment statements.

int main()
{
   cout << "Hi" << endl;
   cout << "there" << endl;
   cout << "Hi" << "there" << endl;
   cout << 39 + 3 << endl;
   cout << "39+3" << endl;
}

1. What is the output after line 3 executes?
A. Hi

2. What is the output after line 4 executes?
A. there

3. What is the output after line 5 executes?
A. Hithere

4. What is the output after line 6 executes?
A. 42

5. What is the output after line 7 executes?
A. 39+3

Common Error 1.7.1: Omitting Semicolons.

In C++, statements such as output or return statements end in a semicolon.

Forgetting to type a semicolon is a common error.
It confuses the compiler because the compiler uses the semicolon to find where one statement ends and the next one starts.

he compiler does not use line ends or closing braces to recognize the ends of statements. 
For example, the compiler considers

cout << "Hello, World!" << endl
return 0;
a single statement, as if you had written

cout << "Hello, World!" << endl return 0;

and then it doesn’t understand that statement, because it does not expect the word return in the middle of an output command. The remedy is simple. Just scan every statement for a terminating semicolon, just as you would check that every English sentence ends in a period.

Sometimes, the error message that flags the missing semicolon is displayed in the following line. When you see such a message, be sure to check the preceding line as well.